;;;; ===================================================
;;;; DYELgame.cl
;;;; ===================================================
;;;  do you have what it takes to get the GAINZ?
;;;
;;;
;;; by Jerrin Lawi-an and Jordan Dumlao

(defparameter +AUTHORS+ "Jerrin Lawi-an & Jordan Dumlao")

(defparameter *nodes* '((living-room (you are in the living-room.
                            a wizard is snoring loudly on the couch.))
                        (garden (you are in a beautiful garden.
                            there is a well in front of you.))
                        (dinosaur-den (you are in the dinosaur-den.
                            its empty. uhoh...))
                        (attic (you are in the attic.
                                    there is a giant welding torch in the corner.))
                        (kitchen (you are in the kitchen.
                                      something smells...good.))
                        (heaven (how did you get here?!))))

(defun describe-location (location nodes)
   (cadr (assoc location nodes)))

(defparameter *edges* '((living-room (garden west door)  
                                     (attic upstairs ladder)
                                     (dinosaur-den downstairs ladder)
                                     (kitchen north door))
                        (garden (living-room east door))
                        (attic (living-room downstairs ladder))
                        (dinosaur-den (living-room upstairs ladder))
                        (kitchen (living-room south door))))

(defun describe-path (edge)
  `(there is a ,(caddr edge) going ,(cadr edge) from here.))

(defun describe-paths (location edges)
  (apply #'append (mapcar #'describe-path (cdr (assoc location edges)))))

(defparameter *objects* '(whiskey bucket frog chain bones 
                                  shell-of-strength beef-of-bold cheese-of-courage
                                  sauciest-sauce lettuce-of-lore taco-of-truth))

(defparameter *magic-objects* '( shell-of-strength beef-of-bold cheese-of-courage
                                                  sauciest-sauce lettuce-of-lore))



(defparameter *object-locations* '((whiskey living-room)
                                   (bucket living-room)
                                   (chain garden)
                                   (frog garden)
                                   (bones dinosaur-den)
                                   (shell-of-strength dinosaur-den)
                                   (beef-of-bold attic)
                                   (cheese-of-courage kitchen)
                                   (sauciest-sauce living-room)
                                   (lettuce-of-lore garden)
                                   (taco-of-truth heaven)))

(defun objects-at (loc objs obj-loc)
   (labels ((is-at (obj)
              (eq (cadr (assoc obj obj-loc)) loc)))
       (remove-if-not #'is-at objs)))

(defun describe-objects (loc objs obj-loc)
   (labels ((describe-obj (obj)
                `(you see a ,obj on the floor.)))
      (apply #'append (mapcar #'describe-obj (objects-at loc objs obj-loc)))))

(defparameter *location* 'living-room)

(defun look ()
  (append (describe-location *location* *nodes*)
          (describe-paths *location* *edges*)
          (describe-objects *location* *objects* *object-locations*)))


(defun walk (direction)
  (labels ((correct-way (edge)
             (eq (cadr edge) direction)))
    (let ((next (find-if #'correct-way (cdr (assoc *location* *edges*)))))
      (if next 
          (progn (setf *location* (car next)) 
                 (look))
          '(you cannot go that way.)))))

(defun pickup (object)
  (cond ((member object (objects-at *location* *objects* *object-locations*))
         (push (list object 'body) *object-locations*)
         `(you are now carrying the ,object))
        (t '(you cannot get that.))))



;;; prints help options
(defun help ()    
  (terpri)
  (princ "Enter one of the following commands: ")
  (terpri)
  (princ *allowed-commands*)
  (terpri))

(defun h()
  (help))

(defun ? ()
  (help))


(defun inventory ()
  (cons 'items- (objects-at 'body *objects* *object-locations*)))

(defun have (object) 
  (member object (cdr (inventory))))

;;;  wizards_game part 2

(defun game-repl ()
    (let ((cmd (game-read)))
      (unless (eq (car cmd) 'quit)
            (game-print (game-eval cmd))
            (game-repl))))

(defun game-read ()
    (let ((cmd (read-from-string (concatenate 'string "(" (read-line) ")"))))
         (flet ((quote-it (x)
                    (list 'quote x)))
             (cons (car cmd) (mapcar #'quote-it (cdr cmd))))))

(defparameter *allowed-commands* '(look walk pickup inventory help h ?))



(defun game-eval (sexp)
    (if (member (car sexp) *allowed-commands*)
        (eval sexp)
        '(i do not know that command.)))

(defun tweak-text (lst caps lit)
  (when lst
    (let ((item (car lst))
          (rest (cdr lst)))
      (cond ((eql item #\space) (cons item (tweak-text rest caps lit)))
            ((member item '(#\! #\? #\.)) (cons item (tweak-text rest t lit)))
            ((eql item #\") (tweak-text rest caps (not lit)))
            (lit (cons item (tweak-text rest nil lit)))
            (caps (cons (char-upcase item) (tweak-text rest nil lit)))
            (t (cons (char-downcase item) (tweak-text rest nil nil)))))))

(defun game-print (lst)
    (princ (coerce (tweak-text (coerce (string-trim "() " (prin1-to-string lst)) 'list) t nil) 'string))
  (fresh-line)(fresh-line))


;;; New macros

(defmacro new-object (obj loc)
  `(progn (cond ((member ',obj *objects*) '(this item already exists.))
                ((not (member ',loc (flatten *nodes*))) '(this is not a valid location.))
                ('t (progn (pushnew ','(obj loc) *object-locations*)
                      (pushnew ',obj *objects*))))))


(defmacro new-location (loc desc)
  `(progn (cond ((assoc ',loc *nodes*)'(this place already exists.))
                ((null ',desc) '(Must have a description.))
                ((push '(,loc (,@desc)) *nodes*)
                 (push '(,loc) *edges*))
                '(added!)
     )))

(defmacro new-edge (org to des path)
  `(progn (cond ((assoc ',org *nodes*)'(Origin does not exist))
                ((assoc ',des *nodes*)'(Destination does not exist))
                ((member des (mapcar #'cadr (cdr (assoc org *edges*))))
                 '(This edge is present.))
                ((nconc (assoc ',org *edges*) 
                        (list (list ',des ',to ',path)))))
    ))
 


(defmacro game-action (command subj  obj place &body body)
  `(progn (defun ,command (subject object)
            (if (and (eq *location* ',place)
                     (eq subject ',subj)
                     (eq object ',obj)
                     (have ',subj))
                ,@body
            '(i cant ,command like that.)))
     (pushnew ',command *allowed-commands*)))


(defparameter *chain-welded* nil)

(game-action weld chain bucket attic
             (if (and (have 'bucket) (not *chain-welded*))
                 (progn (setf *chain-welded* 't)
                        '(the chain is now securely welded to the bucket.))
               '(you do not have a bucket.)))

(defparameter *bucket-filled* nil)


;;; game actions
(game-action dunk bucket well garden
             (if *chain-welded* 
                 (progn (setf *bucket-filled* 't)
                        '(the bucket is now full of water))
               '(the water level is too low to reach.)))

(game-action splash bucket wizard living-room
             (cond ((not *bucket-filled*) '(the bucket has nothing in it.))
                   ((have 'frog) '(the wizard awakens and sees that you stole his frog. 
                                   he is so upset he banishes you to the 
                                   netherworlds- you lose! the end.))
                   (t '(the wizard awakens from his slumber and greets you warmly. 
                         he hands you the magic low-carb donut- you win! the end.))))


;;; battle system

(defparameter *in-battle* nil)

(defun init-battle ()
)